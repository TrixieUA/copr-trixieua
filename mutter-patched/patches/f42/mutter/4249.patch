From e0138426f4ba69b814ab971626845c4ef76fe53d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Tue, 4 Feb 2025 18:44:29 +0100
Subject: [PATCH 1/6] kms/cursor-manager: Get current cursor position later

Specifically, only after checking crtc_state_impl->cursor_invalidated.
If that's false, we bail anyway, so no point getting the current cursor
position, which can get blocked by another thread holding the
seat_impl->state_lock in writer mode.
---
 src/backends/native/meta-kms-cursor-manager.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/backends/native/meta-kms-cursor-manager.c b/src/backends/native/meta-kms-cursor-manager.c
index fe20ebb9171..3724bac070f 100644
--- a/src/backends/native/meta-kms-cursor-manager.c
+++ b/src/backends/native/meta-kms-cursor-manager.c
@@ -327,9 +327,6 @@ maybe_update_cursor_plane (MetaKmsCursorManagerImpl  *cursor_manager_impl,
 
   g_assert (old_buffer && !*old_buffer);
 
-  if (!get_current_cursor_position (cursor_manager_impl, &x, &y))
-    return update;
-
   crtc_state_impl = find_crtc_state (cursor_manager_impl, crtc);
   g_return_val_if_fail (crtc_state_impl, update);
 
@@ -340,6 +337,9 @@ maybe_update_cursor_plane (MetaKmsCursorManagerImpl  *cursor_manager_impl,
   if (!crtc_state_impl->cursor_invalidated)
     return update;
 
+  if (!get_current_cursor_position (cursor_manager_impl, &x, &y))
+    return update;
+
   device = meta_kms_crtc_get_device (crtc_state_impl->crtc);
   buffer = crtc_state_impl->buffer;
   hotspot = &crtc_state_impl->hotspot;
-- 
GitLab


From 1148df676606c1a1250450207b01d69d99e7c308 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Tue, 28 Jan 2025 17:40:19 +0100
Subject: [PATCH 2/6] kms/impl-device: Add
 meta_kms_impl_device_move_cursor_in_impl
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

It calls drmModeMoveCursor for the given CRTC and position (even with
atomic KMS, see comment there).

v2:
* Make it impl-device API using a MetaKmsImplDeviceClass hook.
  (Jonas Ã…dahl)
---
 .../native/meta-kms-impl-device-atomic.c      | 18 ++++++++++++++++
 .../native/meta-kms-impl-device-simple.c      | 14 +++++++++++++
 src/backends/native/meta-kms-impl-device.c    | 21 +++++++++++++++++++
 src/backends/native/meta-kms-impl-device.h    |  9 ++++++++
 4 files changed, 62 insertions(+)

diff --git a/src/backends/native/meta-kms-impl-device-atomic.c b/src/backends/native/meta-kms-impl-device-atomic.c
index 678811adbfe..6765074c1be 100644
--- a/src/backends/native/meta-kms-impl-device-atomic.c
+++ b/src/backends/native/meta-kms-impl-device-atomic.c
@@ -1093,6 +1093,22 @@ disable_planes_and_connectors (MetaKmsImplDevice  *impl_device,
   return TRUE;
 }
 
+static gboolean
+meta_kms_impl_device_atomic_move_cursor (MetaKmsImplDevice *impl_device,
+                                         MetaKmsCrtc       *crtc,
+                                         int                x,
+                                         int                y)
+{
+  uint32_t crtc_id = meta_kms_crtc_get_id (crtc);
+  int fd = meta_kms_impl_device_get_fd (impl_device);
+
+  /* There's no atomic KMS UAPI yet for asynchronously changing the cursor
+   * plane position. Use the legacy KMS UAPI, which the kernel internally
+   * converts to a special atomic commit.
+   */
+  return drmModeMoveCursor (fd, crtc_id, x, y) == 0;
+}
+
 static MetaKmsFeedback *
 meta_kms_impl_device_atomic_process_update (MetaKmsImplDevice *impl_device,
                                             MetaKmsUpdate     *update,
@@ -1494,6 +1510,8 @@ meta_kms_impl_device_atomic_class_init (MetaKmsImplDeviceAtomicClass *klass)
     meta_kms_impl_device_atomic_open_device_file;
   impl_device_class->setup_drm_event_context =
     meta_kms_impl_device_atomic_setup_drm_event_context;
+  impl_device_class->move_cursor =
+    meta_kms_impl_device_atomic_move_cursor;
   impl_device_class->process_update =
     meta_kms_impl_device_atomic_process_update;
   impl_device_class->disable =
diff --git a/src/backends/native/meta-kms-impl-device-simple.c b/src/backends/native/meta-kms-impl-device-simple.c
index 3818376dda3..ecaf474680e 100644
--- a/src/backends/native/meta-kms-impl-device-simple.c
+++ b/src/backends/native/meta-kms-impl-device-simple.c
@@ -1576,6 +1576,18 @@ perform_update_test (MetaKmsImplDevice *impl_device,
     }
 }
 
+static gboolean
+meta_kms_impl_device_simple_move_cursor (MetaKmsImplDevice *impl_device,
+                                         MetaKmsCrtc       *crtc,
+                                         int                x,
+                                         int                y)
+{
+  uint32_t crtc_id = meta_kms_crtc_get_id (crtc);
+  int fd = meta_kms_impl_device_get_fd (impl_device);
+
+  return drmModeMoveCursor (fd, crtc_id, x, y) == 0;
+}
+
 static MetaKmsFeedback *
 meta_kms_impl_device_simple_process_update (MetaKmsImplDevice *impl_device,
                                             MetaKmsUpdate     *update,
@@ -1895,6 +1907,8 @@ meta_kms_impl_device_simple_class_init (MetaKmsImplDeviceSimpleClass *klass)
     meta_kms_impl_device_simple_open_device_file;
   impl_device_class->setup_drm_event_context =
     meta_kms_impl_device_simple_setup_drm_event_context;
+  impl_device_class->move_cursor =
+    meta_kms_impl_device_simple_move_cursor;
   impl_device_class->process_update =
     meta_kms_impl_device_simple_process_update;
   impl_device_class->disable =
diff --git a/src/backends/native/meta-kms-impl-device.c b/src/backends/native/meta-kms-impl-device.c
index 230adb37305..06fd1eb2028 100644
--- a/src/backends/native/meta-kms-impl-device.c
+++ b/src/backends/native/meta-kms-impl-device.c
@@ -300,6 +300,27 @@ kms_event_dispatch_in_impl (MetaThreadImpl  *impl,
   return GINT_TO_POINTER (ret);
 }
 
+gboolean
+meta_kms_impl_device_move_cursor_in_impl (MetaKmsImplDevice *impl_device,
+                                          MetaKmsCrtc       *crtc,
+                                          int                x,
+                                          int                y)
+{
+  MetaKmsImplDeviceClass *klass = META_KMS_IMPL_DEVICE_GET_CLASS (impl_device);
+
+  if (!klass->move_cursor ||
+      !klass->move_cursor (impl_device, crtc, x, y))
+    return FALSE;
+
+  meta_topic (META_DEBUG_KMS,
+              "Moved CRTC %u (%s) cursor to (%d, %d)",
+              meta_kms_crtc_get_id (crtc),
+              meta_kms_device_get_path (meta_kms_crtc_get_device (crtc)),
+              x, y);
+
+  return TRUE;
+}
+
 static gboolean
 ensure_device_file (MetaKmsImplDevice  *impl_device,
                     GError            **error)
diff --git a/src/backends/native/meta-kms-impl-device.h b/src/backends/native/meta-kms-impl-device.h
index 0bbbefa7556..5c7f307fbcb 100644
--- a/src/backends/native/meta-kms-impl-device.h
+++ b/src/backends/native/meta-kms-impl-device.h
@@ -87,6 +87,10 @@ struct _MetaKmsImplDeviceClass
                                          GError            **error);
   void (* setup_drm_event_context) (MetaKmsImplDevice *impl_device,
                                     drmEventContext   *drm_event_context);
+  gboolean (* move_cursor) (MetaKmsImplDevice *impl_device,
+                            MetaKmsCrtc       *crtc,
+                            int                x,
+                            int                y);
   MetaKmsFeedback * (* process_update) (MetaKmsImplDevice *impl_device,
                                         MetaKmsUpdate     *update,
                                         MetaKmsUpdateFlag  flags);
@@ -169,6 +173,11 @@ int meta_kms_impl_device_open_non_privileged_fd (MetaKmsImplDevice *impl_device)
 
 int meta_kms_impl_device_get_signaled_sync_file (MetaKmsImplDevice *impl_device);
 
+gboolean meta_kms_impl_device_move_cursor_in_impl (MetaKmsImplDevice *impl_device,
+                                                   MetaKmsCrtc       *crtc,
+                                                   int                x,
+                                                   int                y);
+
 MetaKmsResourceChanges meta_kms_impl_device_update_states (MetaKmsImplDevice *impl_device,
                                                            uint32_t           crtc_id,
                                                            uint32_t           connector_id);
-- 
GitLab


From 858968334d5cf9289e9efbd2e40e7934d5bb9ffd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Thu, 20 Feb 2025 17:45:32 +0100
Subject: [PATCH 3/6] kms/impl-device: Disable move_cursor hook for nvidia
 driver

The nvidia driver currently doesn't handle the legacy KMS UAPI for
moving the cursor as needed by mutter yet, which would result in the
cursor not moving smoothly / the frame rate being capped below the
display refresh rate while the cursor is being moved.
---
 src/backends/native/meta-kms-impl-device.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/src/backends/native/meta-kms-impl-device.c b/src/backends/native/meta-kms-impl-device.c
index 06fd1eb2028..4c365830429 100644
--- a/src/backends/native/meta-kms-impl-device.c
+++ b/src/backends/native/meta-kms-impl-device.c
@@ -2485,6 +2485,27 @@ maybe_disable_deadline_timer (MetaKmsImplDevice *impl_device)
     }
 }
 
+static void
+maybe_disable_move_cursor (MetaKmsImplDevice *impl_device)
+{
+  MetaKmsImplDeviceClass *klass = META_KMS_IMPL_DEVICE_GET_CLASS (impl_device);
+  MetaKmsImplDevicePrivate *priv =
+    meta_kms_impl_device_get_instance_private (impl_device);
+  static const char *move_cursor_deny_list[] = {
+    "nvidia-drm",
+  };
+  int i;
+
+  for (i = 0; i < G_N_ELEMENTS (move_cursor_deny_list); i++)
+    {
+      if (g_strcmp0 (move_cursor_deny_list[i], priv->driver_name) == 0)
+        {
+          klass->move_cursor = NULL;
+          break;
+        }
+    }
+}
+
 static gboolean
 meta_kms_impl_device_initable_init (GInitable     *initable,
                                     GCancellable  *cancellable,
@@ -2513,6 +2534,7 @@ meta_kms_impl_device_initable_init (GInitable     *initable,
     }
 
   maybe_disable_deadline_timer (impl_device);
+  maybe_disable_move_cursor (impl_device);
 
   priv->crtc_frames =
     g_hash_table_new_full (NULL, NULL,
-- 
GitLab


From c31beb26b14f2a6f3fabf455bb5992225213436f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Tue, 28 Jan 2025 17:44:10 +0100
Subject: [PATCH 4/6] kms/cursor-manager: Try moving cursors from
 position_changed_in_impl

If it works, leave crtc_state_impl->cursor_invalidated unchanged, so
maybe_update_cursor_plane may bail later.

This relies on the KMS driver handling drmModeMoveCursor asynchronously
versus atomic commits. That's already required for smooth cursor
movement with Xorg, mutter becomes one more reason for KMS drivers to
handle this.

The main benefit is that drmModeMoveCursor can be called anytime, and
the KMS driver uses the latest available position for the cursor plane
for each display refresh cycle (or might possibly even be able to move
the cursor outside of vertical blank).

v2:
* Schedule KMS thread update also if meta_kms_crtc_move_cursor_in_impl
  fails, only if it wasn't already done though.
v3:
* Drop superfluous include of meta-kms-crtc-private.h.
---
 src/backends/native/meta-kms-cursor-manager.c | 21 ++++++++++++++++++-
 1 file changed, 20 insertions(+), 1 deletion(-)

diff --git a/src/backends/native/meta-kms-cursor-manager.c b/src/backends/native/meta-kms-cursor-manager.c
index 3724bac070f..b9fd53cc26b 100644
--- a/src/backends/native/meta-kms-cursor-manager.c
+++ b/src/backends/native/meta-kms-cursor-manager.c
@@ -673,6 +673,7 @@ position_changed_in_impl (MetaThreadImpl  *thread_impl,
       const graphene_point_t *hotspot;
       gboolean did_have_cursor;
       gboolean should_have_cursor;
+      graphene_rect_t cursor_rect;
 
       buffer = crtc_state_impl->buffer;
       hotspot = &crtc_state_impl->hotspot;
@@ -684,7 +685,7 @@ position_changed_in_impl (MetaThreadImpl  *thread_impl,
                                                       hotspot,
                                                       position->x,
                                                       position->y,
-                                                      NULL);
+                                                      &cursor_rect);
         }
       else
         {
@@ -700,6 +701,24 @@ position_changed_in_impl (MetaThreadImpl  *thread_impl,
           MetaKmsDevice *device = meta_kms_crtc_get_device (crtc);
           MetaKmsImplDevice *impl_device =
             meta_kms_device_get_impl_device (device);
+          gboolean cursor_invalidated = FALSE;
+
+          if (did_have_cursor)
+            {
+              int x, y;
+
+              x = (int) roundf (cursor_rect.origin.x);
+              y = (int) roundf (cursor_rect.origin.y);
+
+              if (!meta_kms_impl_device_move_cursor_in_impl (impl_device,
+                                                             crtc, x, y))
+                cursor_invalidated = TRUE;
+            }
+
+          if (crtc_state_impl->cursor_invalidated ||
+              (!cursor_invalidated &&
+               did_have_cursor == should_have_cursor))
+            continue;
 
           crtc_state_impl->cursor_invalidated = TRUE;
 
-- 
GitLab


From 2777436fae40083fd4cb8592d24147bdd4ae58a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Wed, 29 Jan 2025 12:45:02 +0100
Subject: [PATCH 5/6] kms: Cancel deadline timer when KMS update is ready

And the move_cursor hook is in place.

Now that cursor moves are handled asynchronously via drmModeMoveCursor,
we don't need to use the deadline timer for smooth and low-latency
cursor movement.

v2:
* Leave deadline timer enabled in general, so if the KMS update isn't
  ready in time for the next display refresh cycle, at least the cursor
  plane can be enabled / disabled for it.
---
 src/backends/native/meta-kms-impl-device.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/backends/native/meta-kms-impl-device.c b/src/backends/native/meta-kms-impl-device.c
index 4c365830429..146843f39e6 100644
--- a/src/backends/native/meta-kms-impl-device.c
+++ b/src/backends/native/meta-kms-impl-device.c
@@ -1871,6 +1871,7 @@ meta_kms_impl_device_update_ready (MetaThreadImpl  *impl,
   CrtcFrame *crtc_frame = user_data;
   MetaKmsDevice *device = meta_kms_crtc_get_device (crtc_frame->crtc);
   MetaKmsImplDevice *impl_device = meta_kms_device_get_impl_device (device);
+  MetaKmsImplDeviceClass *klass = META_KMS_IMPL_DEVICE_GET_CLASS (impl_device);
   MetaKmsImplDevicePrivate *priv =
     meta_kms_impl_device_get_instance_private (impl_device);
   gboolean want_deadline_timer;
@@ -1888,6 +1889,7 @@ meta_kms_impl_device_update_ready (MetaThreadImpl  *impl,
   latch_crtc = g_steal_pointer (&crtc_frame->submitted_update.latch_crtc);
 
   want_deadline_timer =
+    !klass->move_cursor &&
     !crtc_frame->await_flush &&
     is_using_deadline_timer (impl_device) &&
     !meta_kms_crtc_get_current_state (crtc_frame->crtc)->vrr.enabled;
-- 
GitLab


From 24e7957caf12e9e20e48578dd3fe01442fa571f8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michel=20D=C3=A4nzer?= <mdaenzer@redhat.com>
Date: Wed, 19 Feb 2025 18:42:32 +0100
Subject: [PATCH 6/6] kms/crtc: Bump DEADLINE_EVASION_CONSTANT_US to 1000

Now that cursor moves are handled asynchronously via drmModeMoveCursor,
we don't need to be as aggressive about waiting as late as possible
before start of vertical blank.

Significantly lowers the risk of missing a display refresh cycle due to
drmModeAtomicCommit running too late for the KMS driver to apply the
commit to the next cycle.

Closes: https://gitlab.gnome.org/GNOME/mutter/-/issues/3867
---
 src/backends/native/meta-kms-crtc.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/backends/native/meta-kms-crtc.c b/src/backends/native/meta-kms-crtc.c
index 048b36ea68e..2fa2130ced0 100644
--- a/src/backends/native/meta-kms-crtc.c
+++ b/src/backends/native/meta-kms-crtc.c
@@ -28,7 +28,7 @@
 #include "backends/native/meta-kms-update-private.h"
 #include "backends/native/meta-kms-utils.h"
 
-#define DEADLINE_EVASION_CONSTANT_US 200
+#define DEADLINE_EVASION_CONSTANT_US 1000
 
 #define MINIMUM_REFRESH_RATE 30.f
 
-- 
GitLab

