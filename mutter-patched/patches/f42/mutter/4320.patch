From 83db5eaf33278af9ed5e546aa2add9a0e2f618df Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@collabora.com>
Date: Wed, 2 Apr 2025 19:31:25 +0200
Subject: [PATCH 1/2] common/drm-formats: Add field for opaque substitute DRM
 formats

Add add values accordingly.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/4320>
---
 src/common/meta-cogl-drm-formats.h | 67 +++++++++++++++---------------
 1 file changed, 34 insertions(+), 33 deletions(-)

diff --git a/src/common/meta-cogl-drm-formats.h b/src/common/meta-cogl-drm-formats.h
index d64bbc2417c..7fd264f5bed 100644
--- a/src/common/meta-cogl-drm-formats.h
+++ b/src/common/meta-cogl-drm-formats.h
@@ -32,6 +32,7 @@ G_BEGIN_DECLS
 typedef struct _MetaFormatInfo
 {
   uint32_t drm_format;
+  uint32_t opaque_substitute;
   CoglPixelFormat cogl_format;
   MetaMultiTextureFormat multi_texture_format;
 } MetaFormatInfo;
@@ -39,40 +40,40 @@ typedef struct _MetaFormatInfo
 static const MetaFormatInfo meta_format_info[] = {
 /* DRM formats are defined as little-endian, not machine endian. */
 #if G_BYTE_ORDER == G_LITTLE_ENDIAN
-  { DRM_FORMAT_R8, COGL_PIXEL_FORMAT_R_8, META_MULTI_TEXTURE_FORMAT_INVALID },
-  { DRM_FORMAT_R16, COGL_PIXEL_FORMAT_R_16, META_MULTI_TEXTURE_FORMAT_INVALID },
-  { DRM_FORMAT_GR88, COGL_PIXEL_FORMAT_RG_88, META_MULTI_TEXTURE_FORMAT_INVALID },
-  { DRM_FORMAT_GR1616, COGL_PIXEL_FORMAT_RG_1616, META_MULTI_TEXTURE_FORMAT_INVALID },
-  { DRM_FORMAT_RGB565, COGL_PIXEL_FORMAT_RGB_565, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_RGBX8888, COGL_PIXEL_FORMAT_XBGR_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_RGBA8888, COGL_PIXEL_FORMAT_ABGR_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_BGRX8888, COGL_PIXEL_FORMAT_XRGB_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_BGRA8888, COGL_PIXEL_FORMAT_ARGB_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XRGB8888, COGL_PIXEL_FORMAT_BGRX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ARGB8888, COGL_PIXEL_FORMAT_BGRA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XBGR8888, COGL_PIXEL_FORMAT_RGBX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ABGR8888, COGL_PIXEL_FORMAT_RGBA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XRGB2101010, COGL_PIXEL_FORMAT_XRGB_2101010, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ARGB2101010, COGL_PIXEL_FORMAT_ARGB_2101010_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XBGR2101010, COGL_PIXEL_FORMAT_XBGR_2101010, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ABGR2101010, COGL_PIXEL_FORMAT_ABGR_2101010_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XRGB16161616F, COGL_PIXEL_FORMAT_BGRX_FP_16161616, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ARGB16161616F, COGL_PIXEL_FORMAT_BGRA_FP_16161616_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XBGR16161616F, COGL_PIXEL_FORMAT_RGBX_FP_16161616, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ABGR16161616F, COGL_PIXEL_FORMAT_RGBA_FP_16161616_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_YUYV, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_YUYV },
-  { DRM_FORMAT_NV12, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_NV12 },
-  { DRM_FORMAT_P010, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_P010 },
-  { DRM_FORMAT_YUV420, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_YUV420 },
+  { DRM_FORMAT_R8, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_R_8, META_MULTI_TEXTURE_FORMAT_INVALID },
+  { DRM_FORMAT_R16, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_R_16, META_MULTI_TEXTURE_FORMAT_INVALID },
+  { DRM_FORMAT_GR88, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RG_88, META_MULTI_TEXTURE_FORMAT_INVALID },
+  { DRM_FORMAT_GR1616, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RG_1616, META_MULTI_TEXTURE_FORMAT_INVALID },
+  { DRM_FORMAT_RGB565, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RGB_565, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_RGBX8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XBGR_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_RGBA8888, DRM_FORMAT_RGBX8888, COGL_PIXEL_FORMAT_ABGR_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_BGRX8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XRGB_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_BGRA8888, DRM_FORMAT_BGRX8888, COGL_PIXEL_FORMAT_ARGB_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XRGB8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_BGRX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ARGB8888, DRM_FORMAT_XRGB8888, COGL_PIXEL_FORMAT_BGRA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XBGR8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RGBX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ABGR8888, DRM_FORMAT_XBGR8888, COGL_PIXEL_FORMAT_RGBA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XRGB2101010, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XRGB_2101010, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ARGB2101010, DRM_FORMAT_XRGB2101010, COGL_PIXEL_FORMAT_ARGB_2101010_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XBGR2101010, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XBGR_2101010, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ABGR2101010, DRM_FORMAT_XBGR2101010, COGL_PIXEL_FORMAT_ABGR_2101010_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XRGB16161616F, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_BGRX_FP_16161616, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ARGB16161616F, DRM_FORMAT_XRGB16161616F, COGL_PIXEL_FORMAT_BGRA_FP_16161616_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XBGR16161616F, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RGBX_FP_16161616, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ABGR16161616F, DRM_FORMAT_XBGR16161616F, COGL_PIXEL_FORMAT_RGBA_FP_16161616_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_YUYV, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_YUYV },
+  { DRM_FORMAT_NV12, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_NV12 },
+  { DRM_FORMAT_P010, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_P010 },
+  { DRM_FORMAT_YUV420, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_ANY, META_MULTI_TEXTURE_FORMAT_YUV420 },
 #elif G_BYTE_ORDER == G_BIG_ENDIAN
-  { DRM_FORMAT_RGBX8888, COGL_PIXEL_FORMAT_RGBX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_RGBA8888, COGL_PIXEL_FORMAT_RGBA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_BGRX8888, COGL_PIXEL_FORMAT_BGRX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_BGRA8888, COGL_PIXEL_FORMAT_BGRA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XRGB8888, COGL_PIXEL_FORMAT_XRGB_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ARGB8888, COGL_PIXEL_FORMAT_ARGB_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_XBGR8888, COGL_PIXEL_FORMAT_XBGR_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
-  { DRM_FORMAT_ABGR8888, COGL_PIXEL_FORMAT_ABGR_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_RGBX8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_RGBX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_RGBA8888, DRM_FORMAT_RGBX8888, COGL_PIXEL_FORMAT_RGBA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_BGRX8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_BGRX_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_BGRA8888, DRM_FORMAT_BGRX8888, COGL_PIXEL_FORMAT_BGRA_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XRGB8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XRGB_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ARGB8888, DRM_FORMAT_XRGB8888, COGL_PIXEL_FORMAT_ARGB_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_XBGR8888, DRM_FORMAT_INVALID, COGL_PIXEL_FORMAT_XBGR_8888, META_MULTI_TEXTURE_FORMAT_SIMPLE },
+  { DRM_FORMAT_ABGR8888, DRM_FORMAT_XBGR8888, COGL_PIXEL_FORMAT_ABGR_8888_PRE, META_MULTI_TEXTURE_FORMAT_SIMPLE },
 #else
 #error "unexpected G_BYTE_ORDER"
 #endif
-- 
GitLab


From 25a64b2a5adedce54be70cd529eb76108a33c14b Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@collabora.com>
Date: Thu, 6 Mar 2025 00:05:58 +0100
Subject: [PATCH 2/2] wayland/dma-buf: Use opaque format substitutes for
 scanout

Many display engines, especially older or simpler ones, only support
opaque formats. Many clients, however, require formats with alpha for
decorations and can't easily change formats on demand in situations
when their windows are fully opaque, e.g. fullscreen or tiled modes.
Instead they use opaque regions - a feature present both in Wayland
and EWMH - to let compositors know about partial or full opaqueness.

In cases of full opaqueness we can make use of this knowledge and
replace the alpha format with its opaque variant when handing buffers
to KMS for scanout. I.e. we "lie" to KMS about the format, because we
know that the visual result is equal to the one we'd get if the display
engine supported the alpha format.

As a result we hit direct scanout paths for common use-cases like
fullscreen video playback much more often on affected devices, reducing
resource usage.

This "trick" has been used by other compositors like Weston for many
years and appears to work with all upstream modifiers. In theory there
could be modifiers for which this assumption doesn't hold, however it
seems unlikely enought to not block on it for now.

In order to make clients (Mesa) switch to scanout modifiers/flags/etc.
accordingly, we also need to add the actually not supported alpha
formats in scanout tranches.

Part-of: <https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/4320>
---
 src/wayland/meta-wayland-dma-buf.c | 47 +++++++++++++++++++++++++-----
 1 file changed, 40 insertions(+), 7 deletions(-)

diff --git a/src/wayland/meta-wayland-dma-buf.c b/src/wayland/meta-wayland-dma-buf.c
index 2a68837f5ee..327a1e1a97e 100644
--- a/src/wayland/meta-wayland-dma-buf.c
+++ b/src/wayland/meta-wayland-dma-buf.c
@@ -533,6 +533,7 @@ static struct gbm_bo *
 import_scanout_gbm_bo (MetaWaylandDmaBufBuffer  *dma_buf,
                        MetaGpuKms               *gpu_kms,
                        int                       n_planes,
+                       uint32_t                  drm_format,
                        gboolean                 *use_modifier,
                        GError                  **error)
 {
@@ -556,7 +557,7 @@ import_scanout_gbm_bo (MetaWaylandDmaBufBuffer  *dma_buf,
       import_with_modifier = (struct gbm_import_fd_modifier_data) {
         .width = dma_buf->width,
         .height = dma_buf->height,
-        .format = dma_buf->drm_format,
+        .format = drm_format,
         .num_fds = n_planes,
         .modifier = dma_buf->drm_modifier,
       };
@@ -583,7 +584,7 @@ import_scanout_gbm_bo (MetaWaylandDmaBufBuffer  *dma_buf,
       import_legacy = (struct gbm_import_fd_data) {
         .width = dma_buf->width,
         .height = dma_buf->height,
-        .format = dma_buf->drm_format,
+        .format = drm_format,
         .stride = dma_buf->strides[0],
         .fd = dma_buf->fds[0],
       };
@@ -662,6 +663,8 @@ meta_wayland_dma_buf_try_acquire_scanout (MetaWaylandBuffer     *buffer,
   g_autoptr (CoglScanout) scanout = NULL;
   g_autoptr (GError) error = NULL;
   MetaDrmBufferFlags flags;
+  const MetaFormatInfo *format_info;
+  uint32_t drm_format;
   gboolean use_modifier;
   int n_planes;
 
@@ -672,9 +675,24 @@ meta_wayland_dma_buf_try_acquire_scanout (MetaWaylandBuffer     *buffer,
   crtc = meta_renderer_view_get_crtc (renderer_view);
   g_return_val_if_fail (META_IS_CRTC_KMS (crtc), NULL);
   crtc_kms = META_CRTC_KMS (crtc);
-  if (!crtc_supports_modifier (crtc_kms,
-                               dma_buf->drm_format,
-                               dma_buf->drm_modifier))
+
+  format_info = meta_format_info_from_drm_format (dma_buf->drm_format);
+  g_assert (format_info);
+
+  if (format_info->opaque_substitute != DRM_FORMAT_INVALID &&
+      crtc_supports_modifier (crtc_kms,
+                              format_info->opaque_substitute,
+                              dma_buf->drm_modifier))
+    {
+      drm_format = format_info->opaque_substitute;
+    }
+  else if (crtc_supports_modifier (crtc_kms,
+                                   dma_buf->drm_format,
+                                   dma_buf->drm_modifier))
+    {
+      drm_format = dma_buf->drm_format;
+    }
+  else
     {
       meta_topic (META_DEBUG_RENDER,
                   "DRM format 0x%x (0x%lx) not supported by primary plane",
@@ -696,7 +714,11 @@ meta_wayland_dma_buf_try_acquire_scanout (MetaWaylandBuffer     *buffer,
 
   device_file = meta_renderer_native_get_primary_device_file (renderer_native);
   gpu_kms = meta_renderer_native_get_primary_gpu (renderer_native);
-  gbm_bo = import_scanout_gbm_bo (dma_buf, gpu_kms, n_planes, &use_modifier,
+  gbm_bo = import_scanout_gbm_bo (dma_buf,
+                                  gpu_kms,
+                                  n_planes,
+                                  drm_format,
+                                  &use_modifier,
                                   &error);
   if (!gbm_bo)
     {
@@ -1402,7 +1424,18 @@ ensure_scanout_tranche (MetaWaylandDmaBufSurfaceFeedback *surface_feedback,
           if (!crtc_supports_modifier (crtc_kms,
                                        format.drm_format,
                                        format.drm_modifier))
-            continue;
+            {
+              const MetaFormatInfo *format_info;
+
+              format_info = meta_format_info_from_drm_format (format.drm_format);
+              g_assert (format_info);
+
+              if (format_info->opaque_substitute == DRM_FORMAT_INVALID ||
+                  !crtc_supports_modifier (crtc_kms,
+                                           format_info->opaque_substitute,
+                                           format.drm_modifier))
+                continue;
+            }
 
           g_array_append_val (formats, format);
         }
-- 
GitLab

